[
  {
    "question_id": "08806910-5353-47f6-aef4-5a9475cb6075",
    "ide_session_id": "77319620-4fa2-41dc-a465-787434434a20",
    "short_text": "IPL Dashboard App",
    "question_key": "ipl_dashboard_1_1",
    "question_text": "In this project, let's build an **IPL Dashboard App** by applying the concepts we have learned till now.\n\n### Refer to the image below:\n\n<br/>\n<div style=\"text-align: center;\">\n    <img src=\"https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-output-v2.gif\" alt=\"ipl-dashboard-output\" style=\"max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)\">\n</div>\n<br/>\n\n### Design Files\n\n<details>\n<summary>Click to view</summary>\n\n- [Extra Small (Size < 576px) and Small (Size >= 576px) - Home](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-home-sm-output.png)\n- [Extra Small (Size < 576px) and Small (Size >= 576px) - Team Matches](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-team-matches-sm-output-v2.png)\n- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Home](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-home-lg-output.png)\n- [Medium (Size >= 768px), Large (Size >= 992px) and Extra Large (Size >= 1200px) - Team Matches](https://assets.ccbp.in/frontend/content/react-js/ipl-dashboard-team-matches-lg-output-v2.png)\n\n</details>\n\n### Set Up Instructions\n\n<details>\n<summary>Click to view</summary>\n\n- Download dependencies by running `npm install`\n- Start up the app using `npm start`\n</details>\n\n### Completion Instructions\n\n<details>\n<summary>Functionality to be added</summary>\n<br/>\n\nThe app must have the following functionalities\n\n- When the app is opened, Home Route should be displayed\n- When the Home Route is opened,\n  - Make HTTP GET request to the **teamsApiUrl**\n  - **_loader_** should be displayed while fetching the data\n  - After fetching the data, the list of teams should be displayed\n- When a team card in Home Route is clicked,\n  - Page should be navigated to the Team Matches Route with the URL `/team-matches/:id`\n- When the Team Matches Route is opened,\n  - Make HTTP GET request to the **teamMatchesApiUrl** with the team id to get the recent matches data of the team\n    - Example: `https://apis.ccbp.in/ipl/KKR`\n  - **_loader_** should be displayed while fetching the data\n  - After fetching the data, the team banner, latest match, and list of recent matches should be displayed\n\n</details>\n\n<details>\n\n<summary>API Requests & Responses</summary>\n<br/>\n\n**teamsApiUrl**\n\n#### API: `https://apis.ccbp.in/ipl`\n\n#### Method: `GET`\n\n#### Description:\n\nReturns a response containing the list of all IPL teams\n\n#### Response\n\n```json\n{\n  \"teams\": [\n    {\n      \"name\": \"Royal Challengers Bangalore\",\n      \"id\": \"RCB\",\n      \"team_image_url\": \"https://assets.ccbp.in/frontend/react-js/rcb-logo-img.png\",\n      // use value of the key 'name' for alt as `${name}`\n    },\n    ...\n  ],\n}\n```\n\n**teamMatchesApiUrl**\n\n#### API: `https://apis.ccbp.in/ipl/:id`\n\n#### Example: `https://apis.ccbp.in/ipl/KKR`\n\n#### Method: `GET`\n\n#### Description:\n\nReturns a response containing details of all recent matches of a team\n\n#### Response\n\n```json\n{\n  \"team_banner_url\": \"https://assets.ccbp.in/frontend/react-js/kkr-team-img.png\",\n  \"latest_match_details\": {\n    \"umpires\": \"CB Gaffaney, VK Sharma\",\n    \"result\": \"Kolkata Knight Riders Won by 7 wickets\",\n    \"man_of_the_match\": \"Shubman Gill\",\n    \"id\": \"1216545\",\n    \"date\": \"2020-09-26\",\n    \"venue\": \"At Sheikh Zayed Stadium, Abu Dhabi\",\n    \"competing_team\": \"Sunrisers Hyderabad\",\n    \"competing_team_logo\": \"https://upload.wikimedia.org/wikipedia/en/thumb/8/81/Sunrisers_Hyderabad.svg/1200px-Sunrisers_Hyderabad.svg.png\",\n    // use value of the key 'competing_team' for alt as `latest match ${competing_team}`\n    \"first_innings\": \"Sunrisers Hyderabad\",\n    \"second_innings\": \"Kolkata Knight Riders\",\n    \"match_status\": \"Won\",\n  },\n  \"recent_matches\": [\n    {\n      \"umpires\": \"RK Illingworth, K Srinivasan\",\n      \"result\": \"Royal Challengers Bangalore Won by 82 runs\",\n      \"man_of_the_match\": \"AB de Villiers\",\n      \"id\": \"1216540\",\n      \"date\": \"2020-10-12\",\n      \"venue\": \"At Sharjah Cricket Stadium, Sharjah\",\n      \"competing_team\": \"Royal Challengers Bangalore\",\n      \"competing_team_logo\": \"https://upload.wikimedia.org/wikipedia/en/thumb/2/2a/Royal_Challengers_Bangalore_2020.svg/1200px-Royal_Challengers_Bangalore_2020.svg.png\",\n      // use value of the key 'competing_team' for alt as `competing team ${competing_team}`\n      \"first_innings\": \"Royal Challengers Bangalore\",\n      \"second_innings\": \"Kolkata Knight Riders\",\n      \"match_status\": \"Lost\",\n    },\n    ...\n  ],\n}\n```\n\n</details>\n\n<details>\n<summary>Components Structure</summary>\n\n<br/>\n<div style=\"text-align: center;\">\n    <img src=\"https://assets.ccbp.in/frontend/content/react-js/home-component-structure-img.png\" alt=\"home component structure\" style=\"max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)\">\n</div>\n<br/>\n\n<div style=\"text-align: center;\">\n    <img src=\"https://assets.ccbp.in/frontend/content/react-js/team-matches-component-structure-img.png\" alt=\"team matches component structure\" style=\"max-width:100%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)\">\n</div>\n<br/>\n\n</details>\n\n<details>\n<summary>Implementation Files</summary>\n<br/>\n\nUse these files to complete the implementation:\n\n- `src/App.js`\n- `src/components/Home/index.js`\n- `src/components/Home/index.css`\n- `src/components/TeamCard/index.js`\n- `src/components/TeamCard/index.css`\n- `src/components/TeamMatches/index.js`\n- `src/components/TeamMatches/index.css`\n- `src/components/LatestMatch/index.js`\n- `src/components/LatestMatch/index.css`\n- `src/components/MatchCard/index.js`\n- `src/components/MatchCard/index.css`\n</details>\n\n### Quick Tips\n\n<details>\n<summary>Click to view</summary>\n<br>\n\n- To display the animated loader, we need to import the Loader component using the below statement\n\n  ```\n  import Loader from 'react-loader-spinner'\n  ```\n\n- In order to display the given animated loader, pass the `type` and `color` props to the `Loader` component with values as **Oval** and **#ffffff** , respectively\n\n  ```\n  <Loader type=\"Oval\" color=\"#ffffff\" height={50} width={50} />\n  ```\n\n</details>\n\n### Important Note\n\n<details>\n<summary>Click to view</summary>\n\n<br/>\n\n**The following instructions are required for the tests to pass**\n\n- The banner image in the Team Matches Route should have the alt attribute value as `team banner`\n- The alt attribute values for the images received from the response are given in the **Example response**\n- The API responses received from the given api URLs should be converted to camel case\n- Wrap the `Loader` component with an HTML container element and add the `testid` attribute value as `loader` to it as shown below\n  ```\n  <div testid=\"loader\">\n      <Loader type=\"Oval\" color=\"#ffffff\" height={50} width={50} />\n  </div>\n  ```\n- Render HomeRoute component when path in URL matches `/`\n- Render TeamMatchesRoute component when path in URL matches `/team-matches/:id`\n- No need to use the `BrowserRouter` in `App.js` as we have already included in `index.js` file\n- Each TeamMatchesRoute should have different gradient colors as background based on the selected team\n\n</details>\n\n### Resources\n\n<details>\n<summary>Image URLs</summary>\n\n- [https://assets.ccbp.in/frontend/react-js/ipl-dashboard-sm-bg.png](https://assets.ccbp.in/frontend/react-js/ipl-dashboard-sm-bg.png)\n- [https://assets.ccbp.in/frontend/react-js/ipl-dashboard-lg-bg.png](https://assets.ccbp.in/frontend/react-js/ipl-dashboard-lg-bg.png)\n- [https://assets.ccbp.in/frontend/react-js/ipl-logo-img.png](https://assets.ccbp.in/frontend/react-js/ipl-logo-img.png) alt should be **ipl logo**\n\n</details>\n\n<details>\n<summary>Colors</summary>\n\n<br/>\n\n**Background Colors**:\n\n<div style=\"background-color: #1e293b; width: 150px; padding: 10px; color: white\">Hex: #1e293b</div>\n<div style=\"background-color: #a4261d; width: 150px; padding: 10px; color: white\">Hex: #a4261d</div>\n<div style=\"background-color: #5755a7; width: 150px; padding: 10px; color: white\">Hex: #5755a7</div>\n<div style=\"background-color: #d91c1f; width: 150px; padding: 10px; color: white\">Hex: #d91c1f</div>\n<div style=\"background-color: #f7db00; width: 150px; padding: 10px; color: white\">Hex: #f7db00</div>\n<div style=\"background-color: #ffffff33; width: 150px; padding: 10px; color: black\">Hex: #ffffff33</div>\n<div style=\"background-color: #da237b; width: 150px; padding: 10px; color: white\">Hex: #da237b</div>\n<div style=\"background-color: #13418b; width: 150px; padding: 10px; color: white\">Hex: #13418b</div>\n<div style=\"background-color: #f26d22; width: 150px; padding: 10px; color: white\">Hex: #f26d22</div>\n<div style=\"background-color: #4f5db0; width: 150px; padding: 10px; color: white\">Hex: #4f5db0</div>\n<div style=\"background-color: #0f172a; width: 150px; padding: 10px; color: white\">Hex: #0f172a</div>\n<br/>\n\n**Border Colors**\n\n<div style=\"background-color: #ffffff; width: 150px; padding: 10px; color: black\">Hex: #ffffff</div>\n<div style=\"background-color: #475569; width: 150px; padding: 10px; color: black\">Hex: #475569</div>\n\n<br />\n\n**Text Colors**\n\n<div style=\"background-color: #ffffff; width: 150px; padding: 10px; color: black\">Hex: #ffffff</div>\n<div style=\"background-color: #18ed66; width: 150px; padding: 10px; color: black\">Hex: #18ed66</div>\n<div style=\"background-color: #e31a1a; width: 150px; padding: 10px; color: black\">Hex: #e31a1a</div>\n\n</details>\n\n<details>\n<summary>Font-families</summary>\n\n- Bree Serif\n\n</details>\n\n> ### _Things to Keep in Mind_\n>\n> - All components you implement should go in the `src/components` directory.\n> - Don't change the component folder names as those are the files being imported into the tests.\n> - **Do not remove the pre-filled code**\n> - Want to quickly review some of the concepts you’ve been learning? Take a look at the Cheat Sheets.\n",
    "content_type": "MARKDOWN",
    "toughness": "EASY",
    "language": "ENGLISH",
    "question_type": "IDE_BASED_CODING",
    "question_asked_by_companies_info": [],
    "question_format": "CODING_PRACTICE",
    "test_cases": [
      {
        "test_case_enum": "RJSCP9EFN6_TEST_1",
        "display_text": "Page should consist of at least two HTML list items and the teams list received in the response should be rendered using a unique key as a prop for each team card item",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_2",
        "display_text": "Home Route should consist of an HTML main heading element with text content as \"IPL Dashboard\"",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_3",
        "display_text": "Home Route should consist of an HTML image element with alt attribute value as \"ipl logo\" and src attribute value as the URL for IPL Logo image",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_4",
        "display_text": "When the Home Route is opened, it should initially consist of an HTML container element with testid attribute value as \"loader\"",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_5",
        "display_text": "When the Home Route is opened, an HTTP GET request should be made to the given teamsApiUrl to get the list of IPL teams",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_6",
        "display_text": "When the HTTP GET request made in Home Route is successful, then the page should consist of HTML paragraph elements with text content equal to the \"name\" in teams received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_7",
        "display_text": "When the HTTP GET request made in Home Route is successful, then the page should consist of HTML image elements with alt and src values equal to the \"name\" and \"team_image_url\" in teams received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_8",
        "display_text": "When a team card is clicked in Home Route, then the page should be navigated to the Team Matches Route with \"/team-matches/:id\" in the URL",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_9",
        "display_text": "When a \"/bad-path\" is provided in the URL, then the page should be navigated to Not Found Route and consist of an HTML heading element with text content as \"Page Not Found\"",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_10",
        "display_text": "Page should consist of at least eight team cards wrapped with the Link from react-router-dom",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_11",
        "display_text": "Page should consist of at least two HTML list items and the recent matches list received in the response should be rendered using a unique key as a prop for each recent match",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_12",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"umpires\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_13",
        "display_text": "When the Team Matches Route is opened, it should initially contain an HTML container element with testid attribute value as \"loader\"",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_14",
        "display_text": "When the Team Matches Route is opened, an HTTP GET request should be made to the given teamMatchesApiUrl to get recent matches based on the team selected",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_15",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML image element with alt as \"team banner\" and src value equal to the \"team_banner_url\" received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_16",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"competing_team\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_17",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"date\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_18",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"venue\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_19",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"result\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_20",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image element with alt value as \"latest match {competing_team}\" and src value equal to the \"competing_team_logo\" in latest match details received in response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_21",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph element with text content equal to the \"first_innings\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_22",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"second_innings\" in latest match details received in the response ",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_23",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of an HTML paragraph element with text content equal to the \"man_of_the_match\" in latest match details received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_24",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML image elements with alt as \"competing team {competing_team}\" and src value equal to the \"competing_team_logo\" in recent matches received in response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_25",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the \"competing_team\" in recent matches received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_26",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the \"result\" in recent matches received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_27",
        "display_text": "When the HTTP GET request made in Team Matches Route is successful, then the page should consist of HTML paragraph elements with text content equal to the \"match_status\" in recent matches received in the response",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_28",
        "display_text": "When \"/team-matches/:id\" is provided in the URL, then the page should be navigated to the Team Matches Route and consists of the respective umpire names",
        "weightage": 5
      },
      {
        "test_case_enum": "RJSCP9EFN6_TEST_29",
        "display_text": "When the Team Matches Route is opened and back is clicked in the browser, then the page should be navigated to the Home Route",
        "weightage": 5
      }
    ],
    "multimedia": [],
    "solutions_metadata": [
      {
        "ide_session_id": "137d2bd0-5104-4054-beb4-82e2c33960c5",
        "order": 1,
        "title": {
          "content": "IPL Dashboard App",
          "content_type": "MARKDOWN"
        },
        "description": {
          "content": "An approach to develop IPL Dashboard App",
          "content_type": "MARKDOWN"
        }
      }
    ],
    "hints": []
  }
]